{"remainingRequest":"/Users/irinas/TodoList/node_modules/babel-loader/lib/index.js!/Users/irinas/TodoList/node_modules/vuetify/lib/mixins/elevatable/index.js","dependencies":[{"path":"/Users/irinas/TodoList/node_modules/vuetify/lib/mixins/elevatable/index.js","mtime":1646990995838},{"path":"/Users/irinas/TodoList/babel.config.js","mtime":1646991547366},{"path":"/Users/irinas/TodoList/node_modules/cache-loader/dist/cjs.js","mtime":1646990993054},{"path":"/Users/irinas/TodoList/node_modules/babel-loader/lib/index.js","mtime":1646990994703}],"contextDependencies":[],"result":["import _defineProperty from \"/Users/irinas/TodoList/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es6.number.constructor\";\nimport Vue from 'vue';\nexport default Vue.extend({\n  name: 'elevatable',\n  props: {\n    elevation: [Number, String]\n  },\n  computed: {\n    computedElevation: function computedElevation() {\n      return this.elevation;\n    },\n    elevationClasses: function elevationClasses() {\n      var elevation = this.computedElevation;\n      if (elevation == null) return {};\n      if (isNaN(parseInt(elevation))) return {};\n      return _defineProperty({}, \"elevation-\".concat(this.elevation), true);\n    }\n  }\n});",{"version":3,"mappings":";;AAAA,OAAOA,GAAP,MAAgB,KAAhB;AAEA,eAAeA,GAAG,CAACC,MAAJ,CAAW;AACxBC,MAAI,EAAE,YADkB;AAGxBC,OAAK,EAAE;AACLC,aAAS,EAAE,CAACC,MAAD,EAASC,MAAT;AADN,GAHiB;AAOxBC,UAAQ,EAAE;AACRC,qBADQ,+BACS;AACf,aAAO,KAAKJ,SAAZ;AAFM;AAIRK,oBAJQ,8BAIQ;AACd,UAAML,SAAS,GAAG,KAAKI,iBAAvB;AAEA,UAAIJ,SAAS,IAAI,IAAjB,EAAuB,OAAO,EAAP;AACvB,UAAIM,KAAK,CAACC,QAAQ,CAACP,SAAD,CAAT,CAAT,EAAgC,OAAO,EAAP;AAChC,qDAAuB,KAAKA,SAA5B,GAA0C,IAA1C;AACD;AAVO;AAPc,CAAX,CAAf","names":["Vue","extend","name","props","elevation","Number","String","computed","computedElevation","elevationClasses","isNaN","parseInt"],"sourceRoot":"","sources":["../../../src/mixins/elevatable/index.ts"],"sourcesContent":["import Vue from 'vue'\n\nexport default Vue.extend({\n  name: 'elevatable',\n\n  props: {\n    elevation: [Number, String],\n  },\n\n  computed: {\n    computedElevation (): string | number | undefined {\n      return this.elevation\n    },\n    elevationClasses (): Record<string, boolean> {\n      const elevation = this.computedElevation\n\n      if (elevation == null) return {}\n      if (isNaN(parseInt(elevation))) return {}\n      return { [`elevation-${this.elevation}`]: true }\n    },\n  },\n})\n"]}]}